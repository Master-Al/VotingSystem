/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package votingsystem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultButtonModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import util.DatabaseConnection;
import static util.DatabaseConnection.getDatabaseConnection;

/**
 *
 * @author ejave
 */
public class VotersInterface extends javax.swing.JFrame {

    private String idNumber = "";
    private String division = "";

    /**
     * Creates new form VotersInterface
     */
    public VotersInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CBPresident = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        CBVicePres = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        CBGov = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        CBViceGov = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        CBGrade11Rep = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        CBBoardmember = new javax.swing.JComboBox<>();
        BSubmit = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        TFVotersName = new javax.swing.JTextField();
        lbInfo = new javax.swing.JLabel();
        txtDiv = new javax.swing.JTextField();
        CBBoardmember1 = new javax.swing.JComboBox<>();
        CBBoardmember2 = new javax.swing.JComboBox<>();
        CBBoardmember5 = new javax.swing.JComboBox<>();
        CBBoardmember6 = new javax.swing.JComboBox<>();
        CBGrade11Rep1 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();

        jScrollPane1.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(36, 47, 65));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 50)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ELECTION");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("President");

        CBPresident.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBPresident.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4" }));
        CBPresident.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CBPresidentMouseClicked(evt);
            }
        });
        CBPresident.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBPresidentActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Vice President");

        CBVicePres.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBVicePres.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4" }));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Governor");

        CBGov.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBGov.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4" }));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Vice Governer");

        CBViceGov.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBViceGov.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4" }));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Representative");

        CBGrade11Rep.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBGrade11Rep.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2" }));
        CBGrade11Rep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CBGrade11RepMouseClicked(evt);
            }
        });
        CBGrade11Rep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBGrade11RepActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Board Member");

        CBBoardmember.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBBoardmember.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4", "Candidate5" }));
        CBBoardmember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBBoardmemberActionPerformed(evt);
            }
        });

        BSubmit.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        BSubmit.setText("SUBMIT VOTE");
        BSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSubmitActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Name");

        TFVotersName.setEditable(false);
        TFVotersName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        TFVotersName.setText("Voters Name");
        TFVotersName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFVotersNameActionPerformed(evt);
            }
        });

        lbInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbInfo.setForeground(new java.awt.Color(255, 255, 255));
        lbInfo.setText("--");

        txtDiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDivActionPerformed(evt);
            }
        });
        txtDiv.setVisible(false);

        CBBoardmember1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBBoardmember1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4", "Candidate5" }));

        CBBoardmember2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBBoardmember2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4", "Candidate5" }));

        CBBoardmember5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBBoardmember5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4", "Candidate5" }));

        CBBoardmember6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBBoardmember6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2", "Candidate3", "Candidate4", "Candidate5" }));

        CBGrade11Rep1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CBGrade11Rep1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Candidate1", "Candidate2" }));
        CBGrade11Rep1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBGrade11Rep1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtDiv, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lbInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TFVotersName, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4)
                                .addComponent(CBGov, 0, 317, Short.MAX_VALUE)
                                .addComponent(CBPresident, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CBGrade11Rep, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CBBoardmember, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(CBBoardmember1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CBBoardmember2, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(CBViceGov, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CBVicePres, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CBGrade11Rep1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(CBBoardmember5, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CBBoardmember6, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(0, 42, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(258, 258, 258))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(315, 315, 315))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(311, 311, 311))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(BSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(249, 249, 249))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(txtDiv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TFVotersName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CBPresident, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CBVicePres, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(CBGov, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(CBViceGov, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CBBoardmember, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBBoardmember1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CBBoardmember5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(CBBoardmember6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBBoardmember2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CBGrade11Rep, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CBGrade11Rep1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(BSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setSize(new java.awt.Dimension(778, 722));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void TFVotersNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFVotersNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFVotersNameActionPerformed

    private void CBPresidentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBPresidentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBPresidentActionPerformed

    private void CBPresidentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CBPresidentMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CBPresidentMouseClicked

    private void BSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSubmitActionPerformed
        try {
            if (CBPresident.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Your vote is not valid. Please select a President!", "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (CBVicePres.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Your vote is not valid. Please select a Vice President!", "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (CBGov.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Your vote is not valid. Please select a Governor!", "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (CBViceGov.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Your vote is not valid. Please select a Vice Governor!", "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (CBBoardmember.getSelectedIndex() == -1
                    && CBBoardmember1.getSelectedIndex() == -1
                    && CBBoardmember2.getSelectedIndex() == -1
                    && CBBoardmember5.getSelectedIndex() == -1
                    && CBBoardmember6.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Your vote is not valid. Please select a Board Member!", "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (CBBoardmember.getSelectedItem().equals("-")
                    && CBBoardmember1.getSelectedItem().equals("-")
                    && CBBoardmember2.getSelectedItem().equals("-")
                    && CBBoardmember5.getSelectedItem().equals("-")
                    && CBBoardmember6.getSelectedItem().equals("-")) {
                JOptionPane.showMessageDialog(this, "Your vote is not valid. Please select a Board Member!", "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (CBGrade11Rep.getSelectedIndex() == -1
                    && CBGrade11Rep1.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Your vote is not valid. Please select a Representative!", "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (CBGrade11Rep.getSelectedItem().equals("-")
                    && CBGrade11Rep1.getSelectedItem().equals("-")) {
                JOptionPane.showMessageDialog(this, "Your vote is not valid. Please select a Representative!", "Error Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int ans = JOptionPane.showConfirmDialog(this, "This action will finalize and submit your vote.\nPlease confirm.\nYES - My vote is final. I wish to cast my vote.\nNO - I want to change my vote.", "", JOptionPane.YES_NO_OPTION);

            if (ans == JOptionPane.YES_OPTION) {

                Connection c = DatabaseConnection.getDatabaseConnection();

                PreparedStatement ps = c.prepareStatement("DELETE FROM shs_election.votes WHERE STUDENTID = ?;");
                ps.setString(1, idNumber);
                ps.executeUpdate();
                ps = c.prepareStatement("DELETE FROM shs_election.votes_rep WHERE STUDENTID = ?;");
                ps.setString(1, idNumber);
                ps.executeUpdate();

                ps = c.prepareStatement("INSERT INTO shs_election.votes(STUDENTID, STUDENTNAME, DIVISION, PRESIDENT, VICEPRESIDENT, GOVERNOR, VICEGOVERNOR) VALUES (?,?,?,?,?,?,?)");
                ps.setString(1, idNumber);
                ps.setString(2, TFVotersName.getText());
                ps.setString(3, division);
                ps.setString(4, CBPresident.getSelectedItem().toString());
                ps.setString(5, CBVicePres.getSelectedItem().toString());
                ps.setString(6, CBGov.getSelectedItem().toString());
                ps.setString(7, CBViceGov.getSelectedItem().toString());

                ps.executeUpdate();

                //BoardMember
                if (!CBBoardmember.getSelectedItem().toString().equals("-")) {
                    ps = c.prepareStatement("DELETE FROM shs_election.votes_rep WHERE CANDIDATENAME=? AND POSITION=? AND STUDENTID=?");
                    ps.setString(1, CBBoardmember.getSelectedItem().toString());
                    ps.setString(2, "Board Member");
                    ps.setString(3, idNumber);
                    ps.executeUpdate();
                    ps = c.prepareStatement("INSERT INTO shs_election.votes_rep(STUDENTID, STUDENTNAME, DIVISION, CANDIDATENAME, POSITION) VALUES (?,?,?,?,?)");
                    ps.setString(1, idNumber);
                    ps.setString(2, TFVotersName.getText());
                    ps.setString(3, division);
                    ps.setString(4, CBBoardmember.getSelectedItem().toString());
                    ps.setString(5, "Board Member");
                    ps.executeUpdate();
                }
                if (!CBBoardmember1.getSelectedItem().toString().equals("-")) {
                    ps = c.prepareStatement("DELETE FROM shs_election.votes_rep WHERE CANDIDATENAME=? AND POSITION=? AND STUDENTID=?");
                    ps.setString(1, CBBoardmember1.getSelectedItem().toString());
                    ps.setString(2, "Board Member");
                    ps.setString(3, idNumber);
                    ps.executeUpdate();
                    ps = c.prepareStatement("INSERT INTO shs_election.votes_rep(STUDENTID, STUDENTNAME, DIVISION, CANDIDATENAME, POSITION) VALUES (?,?,?,?,?)");
                    ps.setString(1, idNumber);
                    ps.setString(2, TFVotersName.getText());
                    ps.setString(3, division);
                    ps.setString(4, CBBoardmember1.getSelectedItem().toString());
                    ps.setString(5, "Board Member");
                    ps.executeUpdate();
                }

                if (!CBBoardmember2.getSelectedItem().toString().equals("-")) {
                    ps = c.prepareStatement("DELETE FROM shs_election.votes_rep WHERE CANDIDATENAME=? AND POSITION=? AND STUDENTID=?");
                    ps.setString(1, CBBoardmember2.getSelectedItem().toString());
                    ps.setString(2, "Board Member");
                    ps.setString(3, idNumber);
                    ps.executeUpdate();
                    ps = c.prepareStatement("INSERT INTO shs_election.votes_rep(STUDENTID, STUDENTNAME, DIVISION, CANDIDATENAME, POSITION) VALUES (?,?,?,?,?)");
                    ps.setString(1, idNumber);
                    ps.setString(2, TFVotersName.getText());
                    ps.setString(3, division);
                    ps.setString(4, CBBoardmember2.getSelectedItem().toString());
                    ps.setString(5, "Board Member");
                    ps.executeUpdate();
                }

                if (!CBBoardmember5.getSelectedItem().toString().equals("-")) {
                    ps = c.prepareStatement("DELETE FROM shs_election.votes_rep WHERE CANDIDATENAME=? AND POSITION=? AND STUDENTID=?");
                    ps.setString(1, CBBoardmember5.getSelectedItem().toString());
                    ps.setString(2, "Board Member");
                    ps.setString(3, idNumber);
                    ps.executeUpdate();
                    ps = c.prepareStatement("INSERT INTO shs_election.votes_rep(STUDENTID, STUDENTNAME, DIVISION, CANDIDATENAME, POSITION) VALUES (?,?,?,?,?)");
                    ps.setString(1, idNumber);
                    ps.setString(2, TFVotersName.getText());
                    ps.setString(3, division);
                    ps.setString(4, CBBoardmember5.getSelectedItem().toString());
                    ps.setString(5, "Board Member");
                    ps.executeUpdate();
                }

                if (!CBBoardmember6.getSelectedItem().toString().equals("-")) {
                    ps = c.prepareStatement("DELETE FROM shs_election.votes_rep WHERE CANDIDATENAME=? AND POSITION=? AND STUDENTID=?");
                    ps.setString(1, CBBoardmember6.getSelectedItem().toString());
                    ps.setString(2, "Board Member");
                    ps.setString(3, idNumber);
                    ps.executeUpdate();
                    ps = c.prepareStatement("INSERT INTO shs_election.votes_rep(STUDENTID, STUDENTNAME, DIVISION, CANDIDATENAME, POSITION) VALUES (?,?,?,?,?)");
                    ps.setString(1, idNumber);
                    ps.setString(2, TFVotersName.getText());
                    ps.setString(3, division);
                    ps.setString(4, CBBoardmember6.getSelectedItem().toString());
                    ps.setString(5, "Board Member");
                    ps.executeUpdate();
                }
                //Representative
                if (!CBGrade11Rep.getSelectedItem().toString().equals("-")) {
                    ps = c.prepareStatement("DELETE FROM shs_election.votes_rep WHERE CANDIDATENAME=? AND POSITION=? AND STUDENTID=?");
                    ps.setString(1, CBGrade11Rep.getSelectedItem().toString());
                    ps.setString(2, "Representative");
                    ps.setString(3, idNumber);
                    ps.executeUpdate();
                    ps = c.prepareStatement("INSERT INTO shs_election.votes_rep(STUDENTID, STUDENTNAME, DIVISION, CANDIDATENAME, POSITION) VALUES (?,?,?,?,?)");
                    ps.setString(1, idNumber);
                    ps.setString(2, TFVotersName.getText());
                    ps.setString(3, division);
                    ps.setString(4, CBGrade11Rep.getSelectedItem().toString());
                    ps.setString(5, "Representative");
                    ps.executeUpdate();
                }

                if (!CBGrade11Rep1.getSelectedItem().toString().equals("-")) {
                    ps = c.prepareStatement("DELETE FROM shs_election.votes_rep WHERE CANDIDATENAME=? AND POSITION=? AND STUDENTID=?");
                    ps.setString(1, CBGrade11Rep1.getSelectedItem().toString());
                    ps.setString(2, "Representative");
                    ps.setString(3, idNumber);
                    ps.executeUpdate();
                    ps = c.prepareStatement("INSERT INTO shs_election.votes_rep(STUDENTID, STUDENTNAME, DIVISION, CANDIDATENAME, POSITION) VALUES (?,?,?,?,?)");
                    ps.setString(1, idNumber);
                    ps.setString(2, TFVotersName.getText());
                    ps.setString(3, division);
                    ps.setString(4, CBGrade11Rep1.getSelectedItem().toString());
                    ps.setString(5, "Reperesentative");
                    ps.executeUpdate();
                }

                JOptionPane.showMessageDialog(this, "Your vote has been submitted.");
                SignInInterface.txtID.setText("");
                SignInInterface.txtIDConfirm.setText("");
                this.dispose();

//            System.out.println(CBPresident.getSelectedItem().toString());
//            System.out.println(CBVicePres.getSelectedItem().toString());
//            System.out.println(CBGov.getSelectedItem().toString());
//            System.out.println(CBViceGov.getSelectedItem().toString());
//            System.out.println(CBBoardmember.getSelectedItem().toString());
//            System.out.println(CBBoardmember1.getSelectedItem().toString());
//            System.out.println(CBBoardmember2.getSelectedItem().toString());
//            System.out.println(CBBoardmember5.getSelectedItem().toString());
//            System.out.println(CBBoardmember6.getSelectedItem().toString());
//            System.out.println(CBGrade11Rep.getSelectedItem().toString());
//            System.out.println(CBGrade11Rep1.getSelectedItem().toString());
//            System.out.println(idNumber);
            }
        } catch (Exception ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_BSubmitActionPerformed

    private void CBBoardmemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBBoardmemberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBBoardmemberActionPerformed

    private void txtDivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDivActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDivActionPerformed

    private void CBGrade11Rep1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBGrade11Rep1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBGrade11Rep1ActionPerformed

    private void CBGrade11RepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBGrade11RepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBGrade11RepActionPerformed

    private void CBGrade11RepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CBGrade11RepMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CBGrade11RepMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VotersInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VotersInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VotersInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VotersInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VotersInterface v = new VotersInterface();
                v.viewStudentInfo();
                if (v.getIdNumber().isEmpty()) {
                    v.setVisible(false);
                    new SignInInterface().setVisible(true);
                } else {
                    v.setVisible(true);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BSubmit;
    private javax.swing.JComboBox<String> CBBoardmember;
    private javax.swing.JComboBox<String> CBBoardmember1;
    private javax.swing.JComboBox<String> CBBoardmember2;
    private javax.swing.JComboBox<String> CBBoardmember5;
    private javax.swing.JComboBox<String> CBBoardmember6;
    private javax.swing.JComboBox<String> CBGov;
    private javax.swing.JComboBox<String> CBGrade11Rep;
    private javax.swing.JComboBox<String> CBGrade11Rep1;
    private javax.swing.JComboBox<String> CBPresident;
    private javax.swing.JComboBox<String> CBViceGov;
    private javax.swing.JComboBox<String> CBVicePres;
    private javax.swing.JTextField TFVotersName;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbInfo;
    private javax.swing.JTextField txtDiv;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the idNumber
     */
    public String getIdNumber() {
        return idNumber;
    }

    /**
     * @param idNumber the idNumber to set
     */
    public void setIdNumber(String idNumber) {
        this.idNumber = idNumber;
    }

    public void viewStudentInfo() {
        Connection c = getDatabaseConnection();
        try {
            PreparedStatement ps = c.prepareStatement("SELECT * FROM student WHERE idnumber = ?");
            ps.setString(1, idNumber);
            ResultSet rs = ps.executeQuery();
            rs.beforeFirst();

            if (rs.next()) {
                TFVotersName.setText(rs.getString("name"));
                lbInfo.setText(rs.getString("section") + "|" + rs.getString("idnumber"));
                txtDiv.setText(rs.getString("section"));

                CBPresident.setModel(getPresidents());
                CBVicePres.setModel(getVicePresident());

                CBGov.setModel(getGovernor(rs.getString("section")));
                CBViceGov.setModel(getViceGovernor(rs.getString("section")));
                CBGrade11Rep.setModel(getRepresentative(rs.getString("section")));
                CBGrade11Rep1.setModel(getRepresentative1(rs.getString("section")));
                CBBoardmember.setModel(getBoardMember(rs.getString("section")));
                CBBoardmember1.setModel(getBoardMember1(rs.getString("section")));
                CBBoardmember2.setModel(getBoardMember2(rs.getString("section")));
                CBBoardmember5.setModel(getBoardMember5(rs.getString("section")));
                CBBoardmember6.setModel(getBoardMember6(rs.getString("section")));

                CBPresident.setSelectedIndex(-1);
                CBVicePres.setSelectedIndex(-1);
                CBGov.setSelectedIndex(-1);
                CBViceGov.setSelectedIndex(-1);
                CBGrade11Rep.setSelectedIndex(0);
                CBGrade11Rep1.setSelectedIndex(0);
                CBBoardmember.setSelectedIndex(0);
                CBBoardmember1.setSelectedIndex(0);
                CBBoardmember2.setSelectedIndex(0);
                CBBoardmember5.setSelectedIndex(0);
                CBBoardmember6.setSelectedIndex(0);

            }

        } catch (SQLException ex) {
            Logger.getLogger(DatabaseConnection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private DefaultComboBoxModel getPresidents() {

        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'President'");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }

        return dcbm;

    }

    private DefaultComboBoxModel getVicePresident() {
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Vice President'");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;

    }

    private DefaultComboBoxModel getGovernor(String div) {
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Governor' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;
    }

    private DefaultComboBoxModel getViceGovernor(String div) {
        //System.out.println("Div = " + txtDiv.getText());
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Vice Governor' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;
    }

    private DefaultComboBoxModel getRepresentative(String div) {
        //System.out.println("Div = " + txtDiv.getText());
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        dcbm.addElement("-");
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Representative' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;
    }

    private DefaultComboBoxModel getRepresentative1(String div) {
        //System.out.println("Div = " + txtDiv.getText());
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        dcbm.addElement("-");
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Representative' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;
    }

    private DefaultComboBoxModel getBoardMember(String div) {
        //System.out.println("Div = " + txtDiv.getText());
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        dcbm.addElement("-");

        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Board Member' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;
    }

    private DefaultComboBoxModel getBoardMember1(String div) {
        //System.out.println("Div = " + txtDiv.getText());
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        dcbm.addElement("-");
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Board Member' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;

    }

    private DefaultComboBoxModel getBoardMember2(String div) {
        //System.out.println("Div = " + txtDiv.getText());
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        dcbm.addElement("-");
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Board Member' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;

    }

    private DefaultComboBoxModel getBoardMember5(String div) {
        //System.out.println("Div = " + txtDiv.getText());
        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        dcbm.addElement("-");
        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Board Member' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;

    }

    private DefaultComboBoxModel getBoardMember6(String div) {
        System.out.println("Div = " + txtDiv.getText());

        DefaultComboBoxModel dcbm = new DefaultComboBoxModel();
        dcbm.addElement("-");

        try {
            Connection c = DatabaseConnection.getDatabaseConnection();
            PreparedStatement ps = c.prepareStatement("SELECT * FROM shs_election.candidates WHERE position = 'Board Member' AND division = ?");
            ps.setString(1, div);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                dcbm.addElement(rs.getString("candidatename"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(VotersInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dcbm;

    }

    /**
     * @return the division
     */
    public String getDivision() {
        return division;
    }

    /**
     * @param division the division to set
     */
    public void setDivision(String division) {
        this.division = division;

    }

}
